declare const _default: import("vue-demi").DefineComponent<{
    /**
     * By default SimpleBar automatically hides the scrollbar if the user is not scrolling
     * (it emulates Mac OSX Lion's scrollbar). You can make the scrollbar always visible
     * by passing `false`.
     *
     * Default value is `true`.
     *
     * You can also control the animation via CSS as it's a simple CSS opacity transition.
     */
    autoHide: {
        type: BooleanConstructor;
        default: undefined;
    };
    /**
     * It is possible to change the default class names that SimpleBar uses.
     * To get your own styles to work refer to simplebar.css to get an idea how to setup your css.
     * - `content` represents the wrapper for the content being scrolled.
     * - `scrollContent` represents the container containing the elements being scrolled.
     * - `scrollbar` defines the style of the scrollbar with which the user can interact to scroll the content.
     * - `track` styles the area surrounding the `scrollbar`.
     *
     * ```js
     * classNames: {
     *   // defaults
     *   content: 'simplebar-content',
     *   scrollContent: 'simplebar-scroll-content',
     *   scrollbar: 'simplebar-scrollbar',
     *   track: 'simplebar-track'
     * }
     * ```
     */
    classNames: ObjectConstructor;
    /**
     * Force the track to be visible (same behaviour as `overflow: scroll`).
     * Can be `boolean | 'x' | 'y'`, defaults to `false`, which behaves like `overflow: auto`.
     */
    forceVisible: {
        type: (BooleanConstructor | StringConstructor)[];
        validator: (v: boolean | 'x' | 'y') => boolean;
        default: undefined;
    };
    /**
     * Set custom aria-label attribute for users with screen reader.
     */
    ariaLabel: StringConstructor;
    /**
    * Set custom tabIndex attribute.
    */
    tabIndex: NumberConstructor;
    /**
     * Activate RTL support by passing `'rtl'`.
     * You will also need a css rule with `direction: rtl`.
     */
    direction: {
        type: StringConstructor;
        validator: (v: string) => boolean;
    };
    /**
     * Define the delay until the scrollbar hides. Has no effect if `autoHide` is `false`.
     * Default value is `1000`.
     */
    timeout: NumberConstructor;
    /**
     * Controls the click on track behaviour.
     * Default to `true`.
     */
    clickOnTrack: {
        type: BooleanConstructor;
        default: undefined;
    };
    /**
     * Controls the min size of the scrollbar in `px`.
     * Default is `25`.
     */
    scrollbarMinSize: NumberConstructor;
    /**
     * Controls the max size of the scrollbar in `px`.
     * Default is `0` (no max size).
     */
    scrollbarMaxSize: NumberConstructor;
}, unknown, {}, {}, {
    recalculate(): void;
}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, "scroll"[], "scroll", import("vue-demi").VNodeProps & import("vue-demi").AllowedComponentProps & import("vue-demi").ComponentCustomProps, Readonly<import("vue-demi").ExtractPropTypes<{
    /**
     * By default SimpleBar automatically hides the scrollbar if the user is not scrolling
     * (it emulates Mac OSX Lion's scrollbar). You can make the scrollbar always visible
     * by passing `false`.
     *
     * Default value is `true`.
     *
     * You can also control the animation via CSS as it's a simple CSS opacity transition.
     */
    autoHide: {
        type: BooleanConstructor;
        default: undefined;
    };
    /**
     * It is possible to change the default class names that SimpleBar uses.
     * To get your own styles to work refer to simplebar.css to get an idea how to setup your css.
     * - `content` represents the wrapper for the content being scrolled.
     * - `scrollContent` represents the container containing the elements being scrolled.
     * - `scrollbar` defines the style of the scrollbar with which the user can interact to scroll the content.
     * - `track` styles the area surrounding the `scrollbar`.
     *
     * ```js
     * classNames: {
     *   // defaults
     *   content: 'simplebar-content',
     *   scrollContent: 'simplebar-scroll-content',
     *   scrollbar: 'simplebar-scrollbar',
     *   track: 'simplebar-track'
     * }
     * ```
     */
    classNames: ObjectConstructor;
    /**
     * Force the track to be visible (same behaviour as `overflow: scroll`).
     * Can be `boolean | 'x' | 'y'`, defaults to `false`, which behaves like `overflow: auto`.
     */
    forceVisible: {
        type: (BooleanConstructor | StringConstructor)[];
        validator: (v: boolean | 'x' | 'y') => boolean;
        default: undefined;
    };
    /**
     * Set custom aria-label attribute for users with screen reader.
     */
    ariaLabel: StringConstructor;
    /**
    * Set custom tabIndex attribute.
    */
    tabIndex: NumberConstructor;
    /**
     * Activate RTL support by passing `'rtl'`.
     * You will also need a css rule with `direction: rtl`.
     */
    direction: {
        type: StringConstructor;
        validator: (v: string) => boolean;
    };
    /**
     * Define the delay until the scrollbar hides. Has no effect if `autoHide` is `false`.
     * Default value is `1000`.
     */
    timeout: NumberConstructor;
    /**
     * Controls the click on track behaviour.
     * Default to `true`.
     */
    clickOnTrack: {
        type: BooleanConstructor;
        default: undefined;
    };
    /**
     * Controls the min size of the scrollbar in `px`.
     * Default is `25`.
     */
    scrollbarMinSize: NumberConstructor;
    /**
     * Controls the max size of the scrollbar in `px`.
     * Default is `0` (no max size).
     */
    scrollbarMaxSize: NumberConstructor;
}>> & {
    onScroll?: ((...args: any[]) => any) | undefined;
}, {
    autoHide: boolean;
    forceVisible: string | boolean;
    clickOnTrack: boolean;
}>;
export default _default;
