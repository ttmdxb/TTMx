declare const _sfc_main: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        default: string;
    };
    customTabs: {
        type: ArrayConstructor;
        default: () => {
            id: number;
            title: string;
            icon: string;
        }[];
    };
    nextButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    backButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    doneButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    hideButtons: {
        type: BooleanConstructor;
        default: boolean;
    };
    startIndex: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    verticalTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeChange: {
        type: FunctionConstructor;
        default: () => void;
    };
    beforeMount: {
        type: FunctionConstructor;
        default: () => void;
    };
    navigableTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollableTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    cardBackground: {
        type: BooleanConstructor;
        default: boolean;
    };
    squaredTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    showProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    emit: (event: "change" | "complete:wizard" | "updated:tabs", ...args: any[]) => void;
    props: any;
    maxTabIndex: import("vue").Ref<number>;
    currentTabIndex: import("vue").Ref<number>;
    tabs: import("vue").Ref<{
        id?: number;
        title?: string;
        icon?: string;
        active?: boolean;
        checked?: boolean;
    }[]>;
    backButtonOptions: import("vue").ComputedRef<{
        text: string;
        icon: string;
        hideText: boolean;
        hideIcon: boolean;
        disabled: boolean;
    } & Partial<import("../types/wizard").ButtonOption>>;
    nextButtonOptions: import("vue").ComputedRef<{
        text: string;
        icon: string;
        hideText: boolean;
        hideIcon: boolean;
        disabled: boolean;
    } & Partial<import("../types/wizard").ButtonOption>>;
    doneButtonOptions: import("vue").ComputedRef<{
        text: string;
        icon: string;
        hideText: boolean;
        hideIcon: boolean;
        disabled: boolean;
    } & Partial<import("../types/wizard").ButtonOption>>;
    displayPrevTab: import("vue").ComputedRef<boolean>;
    isLastStep: import("vue").ComputedRef<boolean>;
    containerClasses: import("vue").ComputedRef<(string | {
        'fw-vertical': boolean;
        'fw-overflow-scroll'?: undefined;
        'fw-card'?: undefined;
    } | {
        'fw-overflow-scroll': boolean;
        'fw-vertical'?: undefined;
        'fw-card'?: undefined;
    } | {
        'fw-card': boolean;
        'fw-vertical'?: undefined;
        'fw-overflow-scroll'?: undefined;
    })[]>;
    setDefaultValues: () => void;
    nextTab: () => Promise<void>;
    prevTab: () => Promise<void>;
    setActiveIndex: () => void;
    completeWizard: () => void;
    navigateToTab: (index: number) => Promise<void>;
    changeTab: (newTabIndex: number) => Promise<void>;
    WizardStep: import("vue").DefineComponent<{
        tab: {
            type: ObjectConstructor;
            default: () => void;
        };
        index: {
            type: NumberConstructor;
            default: number;
        };
        currentIndex: {
            type: NumberConstructor;
            default: number;
        };
        squaredTab: {
            type: BooleanConstructor;
            default: boolean;
        };
        showProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        props: any;
        progressActive: import("vue").ComputedRef<boolean>;
        iconClass: import("vue").ComputedRef<string>;
        containerClasses: import("vue").ComputedRef<(string | {
            'fw-step-active': any;
            'fw-step-checked': any;
            'fw-squared-tab': boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tab: {
            type: ObjectConstructor;
            default: () => void;
        };
        index: {
            type: NumberConstructor;
            default: number;
        };
        currentIndex: {
            type: NumberConstructor;
            default: number;
        };
        squaredTab: {
            type: BooleanConstructor;
            default: boolean;
        };
        showProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        showProgress: boolean;
        tab: Record<string, any>;
        index: number;
        currentIndex: number;
        squaredTab: boolean;
    }>;
    Button: import("vue").DefineComponent<{
        options: {
            type: ObjectConstructor;
            default: () => {};
        };
    }, {
        props: any;
        getIconClass: (iconName: string) => string;
        getButtonClass: import("vue").ComputedRef<(string | {
            'fw-btn-disabled': any;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        options: {
            type: ObjectConstructor;
            default: () => {};
        };
    }>>, {
        options: Record<string, any>;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "complete:wizard" | "updated:tabs")[], "change" | "complete:wizard" | "updated:tabs", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    customTabs: {
        type: ArrayConstructor;
        default: () => {
            id: number;
            title: string;
            icon: string;
        }[];
    };
    nextButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    backButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    doneButton: {
        type: ObjectConstructor;
        default: () => {};
    };
    hideButtons: {
        type: BooleanConstructor;
        default: boolean;
    };
    startIndex: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    verticalTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeChange: {
        type: FunctionConstructor;
        default: () => void;
    };
    beforeMount: {
        type: FunctionConstructor;
        default: () => void;
    };
    navigableTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollableTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    cardBackground: {
        type: BooleanConstructor;
        default: boolean;
    };
    squaredTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    showProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onComplete:wizard"?: (...args: any[]) => any;
    "onUpdated:tabs"?: (...args: any[]) => any;
}, {
    id: string;
    customTabs: unknown[];
    nextButton: Record<string, any>;
    backButton: Record<string, any>;
    doneButton: Record<string, any>;
    hideButtons: boolean;
    startIndex: number;
    verticalTabs: boolean;
    beforeChange: Function;
    beforeMount: Function;
    navigableTabs: boolean;
    scrollableTabs: boolean;
    cardBackground: boolean;
    squaredTabs: boolean;
    showProgress: boolean;
}>;
export default _sfc_main;
