import { defineComponent as m, computed as u, openBlock as n, createElementBlock as l, normalizeClass as v, unref as c, createCommentVNode as w, createElementVNode as f, renderSlot as i, toDisplayString as B, ref as T, onMounted as W, Fragment as A, renderList as F, createBlock as M, withCtx as S, createVNode as k, nextTick as E } from "vue";
const L = { class: "fw-list-wrapper" }, G = ["id"], H = { class: "fw-step-container" }, J = { key: 1 }, K = /* @__PURE__ */ m({
  __name: "WizardStep",
  props: {
    tab: {
      type: Object,
      default: () => {
      }
    },
    index: {
      type: Number,
      default: 0
    },
    currentIndex: {
      type: Number,
      default: 0
    },
    squaredTab: {
      type: Boolean,
      default: !1
    },
    showProgress: {
      type: Boolean,
      default: !0
    }
  },
  setup(s) {
    const r = s, d = u(() => r.currentIndex > r.index), a = u(() => `pi pi-${r.tab.icon}`), b = u(() => [
      "fw-list-wrapper-icon",
      {
        "fw-step-active": r.tab.active,
        "fw-step-checked": r.tab.checked,
        "fw-squared-tab": r.squaredTab
      }
    ]);
    return (t, h) => (n(), l("li", null, [
      s.showProgress ? (n(), l("div", {
        key: 0,
        class: v(["fw-list-progress", { "fw-list-progress-active": c(d) }])
      }, null, 2)) : w("", !0),
      f("div", L, [
        f("div", {
          id: `step-${s.tab.id}`,
          role: "tab",
          class: v(c(b))
        }, [
          f("div", H, [
            i(t.$slots, "active-step", {}, () => [
              r.tab.icon ? (n(), l("i", {
                key: 0,
                class: v(c(a))
              }, null, 2)) : (n(), l("i", J, B(s.index + 1), 1))
            ])
          ])
        ], 10, G),
        i(t.$slots, "title", {}, () => [
          f("span", {
            class: v(["fw-step-title", {
              active: s.tab.active
            }])
          }, B(s.tab.title), 3)
        ])
      ])
    ]));
  }
}), Q = ["disabled"], R = { key: 0 }, x = /* @__PURE__ */ m({
  __name: "Button",
  props: {
    options: {
      type: Object,
      default: function() {
        return {};
      }
    }
  },
  setup(s) {
    const r = s, d = (b) => `pi pi-${b}`, a = u(() => [
      "fw-btn",
      {
        "fw-btn-disabled": r.options.disabled
      }
    ]);
    return (b, t) => (n(), l("button", {
      class: v(c(a)),
      disabled: s.options.disabled
    }, [
      s.options.hideText ? w("", !0) : (n(), l("span", R, B(s.options.text), 1)),
      s.options.hideIcon ? w("", !0) : (n(), l("i", {
        key: 1,
        class: v(d(s.options.icon))
      }, null, 2))
    ], 10, Q));
  }
}), U = ["id"], X = {
  class: "fw-body-list",
  role: "tablist"
}, Y = { class: "fw-body" }, Z = { class: "fw-body-content" }, ee = { class: "fw-body-container" }, te = {
  key: 0,
  class: "fw-footer"
}, se = { class: "fw-footer-left" }, ae = { class: "fw-footer-right" }, le = /* @__PURE__ */ m({
  __name: "Wizard",
  props: {
    id: {
      type: String,
      default: "fw-" + new Date().valueOf()
    },
    customTabs: {
      type: Array,
      default: () => [
        {
          id: 0,
          title: "Step 1",
          icon: "map"
        },
        {
          id: 1,
          title: "Step 2",
          icon: "check"
        },
        {
          id: 2,
          title: "Step 3",
          icon: "pencil"
        }
      ]
    },
    nextButton: {
      type: Object,
      default: function() {
        return {};
      }
    },
    backButton: {
      type: Object,
      default: function() {
        return {};
      }
    },
    doneButton: {
      type: Object,
      default: function() {
        return {};
      }
    },
    hideButtons: {
      type: Boolean,
      default: !1
    },
    startIndex: {
      type: Number,
      default: 0,
      validator: (s) => s >= 0
    },
    verticalTabs: {
      type: Boolean,
      default: !1
    },
    beforeChange: {
      type: Function,
      default: () => {
      }
    },
    beforeMount: {
      type: Function,
      default: () => {
      }
    },
    navigableTabs: {
      type: Boolean,
      default: !1
    },
    scrollableTabs: {
      type: Boolean,
      default: !1
    },
    cardBackground: {
      type: Boolean,
      default: !1
    },
    squaredTabs: {
      type: Boolean,
      default: !1
    },
    showProgress: {
      type: Boolean,
      default: !0
    }
  },
  emits: ["change", "complete:wizard", "updated:tabs"],
  setup(s, { expose: r, emit: d }) {
    const a = s;
    let b = T(), t = T(0), h = T([]);
    const $ = u(() => Object.assign(
      {
        text: "Back",
        icon: "arrow-left",
        hideText: !1,
        hideIcon: !1,
        disabled: !1
      },
      a.backButton
    )), I = u(() => Object.assign(
      {
        text: "Next",
        icon: "arrow-right",
        hideText: !1,
        hideIcon: !1,
        disabled: !1
      },
      a.nextButton
    )), C = u(() => Object.assign(
      {
        text: "Done",
        icon: "check",
        hideText: !1,
        hideIcon: !1,
        disabled: !1
      },
      a.doneButton
    ));
    W(() => {
      _();
    });
    const q = u(() => t.value !== 0), N = u(() => t.value === b.value), P = u(() => [
      "form-wizard-vue",
      { "fw-vertical": a.verticalTabs },
      { "fw-overflow-scroll": a.scrollableTabs },
      { "fw-card": a.cardBackground }
    ]), _ = () => {
      h.value = a.customTabs, b.value = h.value.length - 1, t.value = a.startIndex, z(), d("change", t);
    }, O = async () => {
      if (t.value === b.value) {
        C.value.disabled || D();
        return;
      }
      if (I.value.disabled)
        return;
      const e = t.value + 1, o = t.value;
      d("change", e, o), await a.beforeChange(), y(e);
    }, V = async () => {
      if (t.value === 0 || $.value.disabled)
        return;
      const e = t.value - 1, o = t.value;
      d("change", e, o), await a.beforeChange(), y(e);
    }, z = () => {
      const e = h.value.entries();
      for (const [o, p] of e) {
        if (o === b.value + 1)
          return;
        p.checked = o < t.value, p.active = o === t.value;
      }
      d("updated:tabs", h, t);
    }, D = () => {
      const e = t.value, o = t.value - 1;
      d("complete:wizard", e, o);
    }, j = async (e) => {
      if (!a.navigableTabs)
        return;
      const o = e, p = t.value;
      d("change", o, p), await a.beforeChange(), y(o);
    }, y = async (e) => {
      t.value = e, z(), await E(), await a.beforeMount();
    };
    return r({
      changeTab: y
    }), (e, o) => (n(), l("div", {
      id: s.id,
      class: v(c(P))
    }, [
      f("ul", X, [
        (n(!0), l(A, null, F(c(h), (p, g) => i(e.$slots, "wizard-step", {
          tab: p,
          index: g,
          navigateToTab: j
        }, () => [
          (n(), M(K, {
            key: p.id,
            tab: p,
            index: g,
            currentIndex: c(t),
            squaredTab: s.squaredTabs,
            showProgress: s.showProgress,
            onClick: (ne) => j(g)
          }, {
            "active-step": S(() => [
              i(e.$slots, "active-step")
            ]),
            title: S(() => [
              i(e.$slots, "title")
            ]),
            _: 2
          }, 1032, ["tab", "index", "currentIndex", "squaredTab", "showProgress", "onClick"]))
        ])), 256))
      ]),
      f("div", Y, [
        f("div", Z, [
          f("div", ee, [
            i(e.$slots, "default")
          ])
        ]),
        s.hideButtons ? w("", !0) : (n(), l("div", te, [
          i(e.$slots, "footer", {}, () => [
            f("div", se, [
              c(q) ? (n(), l("span", {
                key: 0,
                role: "button",
                onClick: V
              }, [
                i(e.$slots, "back", {}, () => [
                  k(x, { options: c($) }, null, 8, ["options"])
                ])
              ])) : w("", !0),
              i(e.$slots, "custom-buttons-left")
            ]),
            f("div", ae, [
              i(e.$slots, "custom-buttons-right"),
              c(N) ? (n(), l("span", {
                key: 0,
                role: "button",
                onClick: O
              }, [
                i(e.$slots, "done", {}, () => [
                  k(x, { options: c(C) }, null, 8, ["options"])
                ])
              ])) : (n(), l("div", {
                key: 1,
                role: "button",
                onClick: O
              }, [
                i(e.$slots, "next", {}, () => [
                  k(x, { options: c(I) }, null, 8, ["options"])
                ])
              ]))
            ])
          ])
        ]))
      ])
    ], 10, U));
  }
});
export {
  le as default
};
