import { PropType, type Ref } from "vue";
import { MarkerClusterer, MarkerClustererOptions, MarkerClustererEvents } from "@googlemaps/markerclusterer";
export interface IMarkerClusterExposed {
    markerCluster: Ref<MarkerClusterer | undefined>;
}
export declare const markerClusterEvents: MarkerClustererEvents[];
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    options: {
        type: PropType<MarkerClustererOptions>;
        default: () => {};
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, MarkerClustererEvents[], MarkerClustererEvents, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: PropType<MarkerClustererOptions>;
        default: () => {};
    };
}>> & Readonly<{
    onClick?: ((...args: any[]) => any) | undefined;
    onClusteringbegin?: ((...args: any[]) => any) | undefined;
    onClusteringend?: ((...args: any[]) => any) | undefined;
    "onGmp-click"?: ((...args: any[]) => any) | undefined;
}>, {
    options: MarkerClustererOptions;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
