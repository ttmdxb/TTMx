import { PropType, Ref } from "vue";
import Sortable, { SortableOptions } from "sortablejs";
import type { AutoScrollOptions } from "sortablejs/plugins";
type SortableOptionsProp = Omit<SortableOptions | AutoScrollOptions, "onUnchoose" | "onChoose" | "onStart" | "onEnd" | "onAdd" | "onUpdate" | "onSort" | "onRemove" | "onFilter" | "onMove" | "onClone" | "onChange">;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    /** All SortableJS options are supported; events are handled by the `defineEmits` below and should be used with v-on */
    options: {
        type: PropType<SortableOptionsProp>;
        default: null;
        required: false;
    };
    /** Your list of items **/
    list: {
        type: PropType<any[]>;
        default: never[];
        required: true;
    };
    /** The name of the key present in each item in the list that corresponds to a unique value. */
    itemKey: {
        type: PropType<string | ((item: any) => string | number | Symbol)>;
        default: string;
        required: true;
    };
    /** The element type to render as. */
    tag: {
        type: PropType<string>;
        default: string;
        required: false;
    };
}, {
    containerRef: Ref<HTMLDivElement | null>;
    sortable: Ref<Sortable | null>;
    isDragging: Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    choose: (evt: Sortable.SortableEvent) => void;
    unchoose: (evt: Sortable.SortableEvent) => void;
    start: (evt: Sortable.SortableEvent) => void;
    end: (evt: Sortable.SortableEvent) => void;
    add: (evt: Sortable.SortableEvent) => void;
    update: (evt: Sortable.SortableEvent) => void;
    sort: (evt: Sortable.SortableEvent) => void;
    remove: (evt: Sortable.SortableEvent) => void;
    filter: (evt: Sortable.SortableEvent) => void;
    move: (evt: Sortable.MoveEvent, originalEvent: Event) => void;
    clone: (evt: Sortable.SortableEvent) => void;
    change: (evt: Sortable.SortableEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /** All SortableJS options are supported; events are handled by the `defineEmits` below and should be used with v-on */
    options: {
        type: PropType<SortableOptionsProp>;
        default: null;
        required: false;
    };
    /** Your list of items **/
    list: {
        type: PropType<any[]>;
        default: never[];
        required: true;
    };
    /** The name of the key present in each item in the list that corresponds to a unique value. */
    itemKey: {
        type: PropType<string | ((item: any) => string | number | Symbol)>;
        default: string;
        required: true;
    };
    /** The element type to render as. */
    tag: {
        type: PropType<string>;
        default: string;
        required: false;
    };
}>> & {
    onUnchoose?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onChoose?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onStart?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onEnd?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onAdd?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onUpdate?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onSort?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onRemove?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onFilter?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onMove?: ((evt: Sortable.MoveEvent, originalEvent: Event) => any) | undefined;
    onClone?: ((evt: Sortable.SortableEvent) => any) | undefined;
    onChange?: ((evt: Sortable.SortableEvent) => any) | undefined;
}, {
    options: SortableOptionsProp;
    list: any[];
    itemKey: string | ((item: any) => string | number | Symbol);
    tag: string;
}, {}>, {
    header?(_: {}): any;
    item?(_: {
        key: any;
        element: any;
        index: number;
    }): any;
    footer?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
